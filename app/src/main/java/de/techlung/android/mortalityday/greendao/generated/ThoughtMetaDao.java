package de.techlung.android.mortalityday.greendao.generated;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.techlung.android.mortalityday.greendao.generated.ThoughtMeta;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table THOUGHT_META.
*/
public class ThoughtMetaDao extends AbstractDao<ThoughtMeta, String> {

    public static final String TABLENAME = "THOUGHT_META";

    /**
     * Properties of entity ThoughtMeta.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "key", true, "KEY");
        public final static Property WasVoted = new Property(1, Boolean.class, "wasVoted", false, "WAS_VOTED");
    };


    public ThoughtMetaDao(DaoConfig config) {
        super(config);
    }
    
    public ThoughtMetaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'THOUGHT_META' (" + //
                "'KEY' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: key
                "'WAS_VOTED' INTEGER);"); // 1: wasVoted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THOUGHT_META'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ThoughtMeta entity) {
        stmt.clearBindings();
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(1, key);
        }
 
        Boolean wasVoted = entity.getWasVoted();
        if (wasVoted != null) {
            stmt.bindLong(2, wasVoted ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ThoughtMeta readEntity(Cursor cursor, int offset) {
        ThoughtMeta entity = new ThoughtMeta( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // key
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0 // wasVoted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ThoughtMeta entity, int offset) {
        entity.setKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWasVoted(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ThoughtMeta entity, long rowId) {
        return entity.getKey();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ThoughtMeta entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
