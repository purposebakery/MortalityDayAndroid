package de.techlung.android.mortalityday.greendao.generated;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.techlung.android.mortalityday.greendao.generated.Thought;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table THOUGHT.
*/
public class ThoughtDao extends AbstractDao<Thought, String> {

    public static final String TABLENAME = "THOUGHT";

    /**
     * Properties of entity Thought.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "key", true, "KEY");
        public final static Property Category = new Property(1, Integer.class, "category", false, "CATEGORY");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
        public final static Property Text = new Property(4, String.class, "text", false, "TEXT");
        public final static Property Rating = new Property(5, Integer.class, "rating", false, "RATING");
        public final static Property Shared = new Property(6, Boolean.class, "shared", false, "SHARED");
    };


    public ThoughtDao(DaoConfig config) {
        super(config);
    }
    
    public ThoughtDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'THOUGHT' (" + //
                "'KEY' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: key
                "'CATEGORY' INTEGER," + // 1: category
                "'AUTHOR' TEXT," + // 2: author
                "'DATE' INTEGER," + // 3: date
                "'TEXT' TEXT," + // 4: text
                "'RATING' INTEGER," + // 5: rating
                "'SHARED' INTEGER);"); // 6: shared
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THOUGHT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Thought entity) {
        stmt.clearBindings();
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(1, key);
        }
 
        Integer category = entity.getCategory();
        if (category != null) {
            stmt.bindLong(2, category);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
 
        Integer rating = entity.getRating();
        if (rating != null) {
            stmt.bindLong(6, rating);
        }
 
        Boolean shared = entity.getShared();
        if (shared != null) {
            stmt.bindLong(7, shared ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Thought readEntity(Cursor cursor, int offset) {
        Thought entity = new Thought( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // key
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // category
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // text
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // rating
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // shared
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Thought entity, int offset) {
        entity.setKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCategory(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRating(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setShared(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Thought entity, long rowId) {
        return entity.getKey();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Thought entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
